getgenv().ScriptConfig = {
    SpeedConfig = {
        Multiplier = 7,
        ToggleKey = Enum.KeyCode.Z
    },

    CamLockConfig = {
        ToggleKey = Enum.KeyCode.C,
        Prediction = 0,
        Smoothness = 0.449
    },

    SpinbotConfig = {
        ToggleKey = Enum.KeyCode.V,
        Speed = 30
    },

    FlyConfig = {
        ToggleKey = Enum.KeyCode.H,
        Speed = 25,
        VerticalSpeed = 25
    }
}

local success, NotifyLibrary = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/XK5NG/XK5NG.github.io/main/Notify"))()
end)
local Notify = success and NotifyLibrary.Notify or function(params)
    print((params.Title or "Notification") .. ": " .. (params.Text or "No Text"))
end

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local StarterGui = game:GetService("StarterGui")
local player = Players.LocalPlayer
local HRP = player.Character:WaitForChild("HumanoidRootPart")
local isSpeed, isFlying, isLocked, isSpinbotting = false, false, false, false
local target, flyToggle

local function moveTo(direction)
    local target = HRP.CFrame + direction * getgenv().ScriptConfig.FlyConfig.Speed
    local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
    local tween = TweenService:Create(HRP, tweenInfo, {CFrame = target})
    tween:Play()
end

-- Start Flying
local function startFlying()
    isFlying = true
    local flyLoop
    flyLoop = RunService.RenderStepped:Connect(function()
        if not isFlying then
            flyLoop:Disconnect()
            return
        end

        local direction = Vector3.new()
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            direction += workspace.CurrentCamera.CFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            direction -= workspace.CurrentCamera.CFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            direction -= workspace.CurrentCamera.CFrame.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            direction += workspace.CurrentCamera.CFrame.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
            direction += Vector3.new(0, getgenv().ScriptConfig.FlyConfig.VerticalSpeed, 0)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
            direction -= Vector3.new(0, getgenv().ScriptConfig.FlyConfig.VerticalSpeed, 0)
        end

        if direction.Magnitude > 0 then
            moveTo(direction.Unit)
        end

        if direction.Magnitude == 0 then
            HRP.Velocity = Vector3.new(0, 0.1, 0)
        else
            HRP.Velocity = Vector3.new(0, 0, 0)
        end
    end)

    return function()
        isFlying = false
        HRP.Velocity = Vector3.new(0, 0, 0)
    end
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == getgenv().ScriptConfig.FlyConfig.ToggleKey then
        if not isFlying then
            flyToggle = startFlying()
            Notify({Title = "Fly == On", Duration = 2})
        else
            flyToggle()
            Notify({Title = "Fly == Off", Duration = 2})
        end
    end
end)

local function onMove()
    local moveDirection = Vector3.new(0, 0, 0)
    local cam = workspace.CurrentCamera
    if UserInputService:IsKeyDown(Enum.KeyCode.W) then moveDirection += (cam.CFrame.LookVector * Vector3.new(1, 0, 1)).unit end
    if UserInputService:IsKeyDown(Enum.KeyCode.S) then moveDirection -= (cam.CFrame.LookVector * Vector3.new(1, 0, 1)).unit end
    if UserInputService:IsKeyDown(Enum.KeyCode.A) then moveDirection -= (cam.CFrame.RightVector * Vector3.new(1, 0, 1)).unit end
    if UserInputService:IsKeyDown(Enum.KeyCode.D) then moveDirection += (cam.CFrame.RightVector * Vector3.new(1, 0, 1)).unit end

    if HRP then
        local targetPosition = HRP.Position + moveDirection * getgenv().ScriptConfig.SpeedConfig.Multiplier
        HRP.CFrame = HRP.CFrame:Lerp(CFrame.new(targetPosition), 0.2)
    end
end

local function toggleSpeed()
    isSpeed = not isSpeed
    if isSpeed then
        RunService:BindToRenderStep("CFrameSpeed", Enum.RenderPriority.Character.Value, onMove)
        Notify({Title = "CFrame Speed == On", Duration = 2})
    else
        RunService:UnbindFromRenderStep("CFrameSpeed")
        Notify({Title = "CFrame Speed == Off", Duration = 2})
    end
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == getgenv().ScriptConfig.SpeedConfig.ToggleKey then
        toggleSpeed()
    end
end)

-- :D
local camera = game:GetService("Workspace").CurrentCamera
local isCameraLocked = false
local lockedPlayer = nil

local function getClosestPlayer()
    local closestPlayer, closestDistance = nil, math.huge
    local mousePosition = player:GetMouse().Hit.Position

    for _, otherPlayer in ipairs(Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (otherPlayer.Character.HumanoidRootPart.Position - mousePosition).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestPlayer = otherPlayer
            end
        end
    end
    return closestPlayer
end

local function toggleCameraLock()
    if isCameraLocked then
        isCameraLocked = false
        lockedPlayer = nil
        Notify({Title = "CamLock  Off", Duration = 2})
    else
        lockedPlayer = getClosestPlayer()
        if lockedPlayer then
            isCameraLocked = true
            Notify({Title = "CamLock  On", Duration = 2})
        end
    end
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.P then
        toggleCameraLock()
    end
end)

RunService.RenderStepped:Connect(function()
    if isCameraLocked and lockedPlayer and lockedPlayer.Character then
        local targetPosition = lockedPlayer.Character.HumanoidRootPart.Position
        camera.CFrame = CFrame.lookAt(camera.CFrame.Position, targetPosition)
    end
end) 

-- Spinbot
local function toggleSpinbot()
    isSpinbotting = not isSpinbotting
    if isSpinbotting then
        RunService:BindToRenderStep("Spinbot", Enum.RenderPriority.Camera.Value + 1, function()
            HRP.CFrame *= CFrame.Angles(0, math.rad(getgenv().ScriptConfig.SpinbotConfig.Speed), 0)
        end)
        Notify({Title = "Spinbot == On", Duration = 2})
    else
        RunService:UnbindFromRenderStep("Spinbot")
        Notify({Title = "Spinbot == Off", Duration = 2})
    end
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == getgenv().ScriptConfig.SpinbotConfig.ToggleKey then
        toggleSpinbot()
    end
end)

StarterGui:SetCore("SendNotification", {Title = "SCRIPT loaded", Text = "BEST SCRIPT (maddies)", Duration = 5})
StarterGui:SetCore("SendNotification", {Title = "SCRIPT loaded", Text = "BEST SCRIPT (maddies)", Duration = 5})
StarterGui:SetCore("SendNotification", {Title = "SCRIPT loaded", Text = "BEST SCRIPT (maddies)", Duration = 5})
StarterGui:SetCore("SendNotification", {Title = "SCRIPT loaded", Text = "BEST SCRIPT (maddies)", Duration = 5})
StarterGui:SetCore("SendNotification", {Title = "SCRIPT loaded", Text = "BEST SCRIPT (maddies)", Duration = 5})
StarterGui:SetCore("SendNotification", {Title = "SCRIPT loaded", Text = "BEST SCRIPT (maddies)", Duration = 5})
StarterGui:SetCore("SendNotification", {Title = "SCRIPT loaded", Text = "BEST SCRIPT (maddies)", Duration = 5})
StarterGui:SetCore("SendNotification", {Title = "SCRIPT loaded", Text = "LOADED)", Duration = 5})
StarterGui:SetCore("SendNotification", {Title = "SCRIPT loaded", Text = "LOADED)", Duration = 5})
StarterGui:SetCore("SendNotification", {Title = "SCRIPT loaded", Text = "LOADED)", Duration = 5})
StarterGui:SetCore("SendNotification", {Title = "SCRIPT loaded", Text = "LOADED)", Duration = 5})
